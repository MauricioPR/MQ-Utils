/*
Copyright (c) IBM Corporation 2000, 2018
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Contributors:
Jim MacNair - Initial Contribution
*/

//
// comsubs.h: common subroutines.header file
//
//////////////////////////////////////////////////////////////////////

//#ifdef  __cplusplus
//extern "C" {
//#endif

#ifdef WIN32
typedef unsigned __int64 int64_t;
#endif

static const unsigned char HEX_NUMBERS[] = "0123456789ABCDEF";

///////////////////////////////////////////////////////////
//
// MY_TIME_T
// The definition of this data type is platform specific.
//
///////////////////////////////////////////////////////////

typedef unsigned __int64 MY_TIME_T;

//****************************************************************************/
//static  const unsigned char aetab[] = {    //**** ASCII -----> EBCDIC *****/
//                    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,   /* 00 */
//                    0x08,0x09,0x25,0x0B,0x0C,0x0D,0x0E,0x0F,   /* 08 */
//                    0x10,0x11,0x12,0x13,0xB6,0xB5,0x16,0x17,   /* 10 */
//                    0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,   /* 18 */
//                    0x40,0x4F,0x7F,0x7B,0x5B,0x6C,0x50,0x7D,   /* 20 */
//                    0x4D,0x5D,0x5C,0x4E,0x6B,0x60,0x4B,0x61,   /* 28 */
//                    0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,   /* 30 */
//                    0xF8,0xF9,0x7A,0x5E,0x4C,0x7E,0x6E,0x6F,   /* 38 */
//                    0x7C,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,   /* 40 */
//                    0xC8,0xC9,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,   /* 48 */
//                    0xD7,0xD8,0xD9,0xE2,0xE3,0xE4,0xE5,0xE6,   /* 50 */
//                    0xE7,0xE8,0xE9,0x4A,0xE0,0x5A,0x5F,0x6D,   /* 58 */
//                    0x79,0x81,0x82,0x83,0x84,0x85,0x86,0x87,   /* 60 */
//                    0x88,0x89,0x91,0x92,0x93,0x94,0x95,0x96,   /* 68 */
//                    0x97,0x98,0x99,0xA2,0xA3,0xA4,0xA5,0xA6,   /* 70 */
//                    0xA7,0xA8,0xA9,0xC0,0xBB,0xD0,0xA1,0x41,   /* 78 */
//                    0x68,0xDC,0x51,0x42,0x43,0x44,0x47,0x48,   /* 80 */
//                    0x52,0x53,0x54,0x57,0x56,0x58,0x63,0x67,   /* 88 */
//                    0x71,0x9C,0x9E,0xCB,0xCC,0xCD,0xDB,0xDD,   /* 90 */
//                    0xDF,0xEC,0xFC,0x70,0xB1,0x80,0x41,0x80,   /* 98 */
//                    0x45,0x55,0xCE,0xDE,0x49,0x69,0x9A,0x9B,   /* A0 */
//                    0xAB,0xAF,0xBA,0xB8,0xB7,0xAA,0x8A,0x8B,   /* A8 */
//                    0x41,0x41,0x41,0x41,0x41,0x65,0x62,0x64,   /* B0 */
//                    0x41,0x41,0x41,0x41,0x41,0xB0,0xB2,0x41,   /* B8 */
//                    0x41,0x41,0x41,0x41,0x41,0x41,0x46,0x66,   /* C0 */
//                    0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x9F,   /* C8 */
//                    0x8C,0xAC,0x72,0x73,0x74,0xDA,0x75,0x76,   /* D0 */
//                    0x77,0x41,0x41,0x41,0x41,0x6A,0x78,0x41,   /* D8 */
//                    0xEE,0x59,0xEB,0xED,0xCF,0xEF,0xA0,0xAE,   /* E0 */
//                    0x8E,0xFE,0xFB,0xFD,0x8D,0xAD,0xBC,0xBE,   /* E8 */
//                    0xCA,0x8F,0xBF,0xB9,0xB6,0xB5,0x41,0x9D,   /* F0 */
//                    0x90,0xBD,0xB3,0x41,0xFA,0xEA,0x41,0x41 }; /* F8 */

//static  const unsigned char eatab[] = {  /***** EBCDIC -----> ASCII *****/
//                    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,   /* 00 */
//                    0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,   /* 08 */
//                    0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,   /* 10 */
//                    0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,   /* 18 */
//                    0x20,0x21,0x22,0x23,0x24,0x0A,0x26,0x27,   /* 20 */
//                    0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,   /* 28 */
//                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,   /* 30 */
//                    0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,   /* 38 */
//                    0x20,0xFF,0x83,0x84,0x85,0xA0,0xC6,0x86,   /* 40 */
//                    0x87,0xA4,0x5B,0x2E,0x3C,0x28,0x2B,0x21,   /* 48 */
//                    0x26,0x82,0x88,0x89,0x8A,0xA1,0x8C,0x8B,   /* 50 */
//                    0x8D,0xE1,0x5D,0x24,0x2A,0x29,0x3B,0x5E,   /* 58 */
//                    0x2D,0x2F,0xB6,0x8E,0xB7,0xB5,0xC7,0x8F,   /* 60 */
//                    0x80,0xA5,0xDD,0x2C,0x25,0x5F,0x3E,0x3F,   /* 68 */
//                    0x9B,0x90,0xD2,0xD3,0xD4,0xD6,0xD7,0xD8,   /* 70 */
//                    0xDE,0x60,0x3A,0x23,0x40,0x27,0x3D,0x22,   /* 78 */
//                    0x9F,0x61,0x62,0x63,0x64,0x65,0x66,0x67,   /* 80 */
//                    0x68,0x69,0xAE,0xAF,0xD0,0xEC,0xE8,0xF1,   /* 88 */
//                    0xF8,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,   /* 90 */
//                    0x71,0x72,0xA6,0xA7,0x91,0xF7,0x92,0xCF,   /* 98 */
//                    0xE6,0x7E,0x73,0x74,0x75,0x76,0x77,0x78,   /* A0 */
//                    0x79,0x7A,0xAD,0xA8,0xD1,0xED,0xE7,0xA9,   /* A8 */
//                    0xBD,0x9C,0xBE,0xFA,0x9F,0xF5,0xF4,0xAC,   /* B0 */
//                    0xAB,0xF3,0xAA,0x7C,0xEE,0xF9,0xEF,0xF2,   /* B8 */
//                    0x7B,0x41,0x42,0x43,0x44,0x45,0x46,0x47,   /* C0 */
//                    0x48,0x49,0xF0,0x93,0x94,0x95,0xA2,0xE4,   /* C8 */
//                    0x7D,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,   /* D0 */
//                    0x51,0x52,0xD5,0x96,0x81,0x97,0xA3,0x98,   /* D8 */
//                    0x5C,0xE1,0x53,0x54,0x55,0x56,0x57,0x58,   /* E0 */
//                    0x59,0x5A,0xFD,0xE2,0x99,0xE3,0xE0,0xE5,   /* E8 */
//                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,   /* F0 */
//                    0x38,0x39,0xFC,0xEA,0x9A,0xEB,0xE9,0xFF};  /* F8 */

////////////////////////////////////////////////////////////////////////////
//
// These tables are based on ASCII code page 1252 and EBCDIC code page
// 500.  They include the Euro character at x'80' in ASCII and x'9F"
// in EBCDIC.
//
////////////////////////////////////////////////////////////////////////////

static  const unsigned char aetab[] = {    //**** ASCII -----> EBCDIC ****//
				0x00, 0x01, 0x02, 0x03, 0x37, 0x2D, 0x2E, 0x2F, 	// 00 //
				0x16, 0x05, 0x25, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 	// 08 //
				0x10, 0x11, 0x12, 0x13, 0x3C, 0x3D, 0x32, 0x26, 	// 10 //
				0x18, 0x19, 0x3F, 0x27, 0x1C, 0x1D, 0x1E, 0x1F, 	// 18 //
				0x40, 0x4F, 0x7F, 0x7B, 0x5B, 0x6C, 0x50, 0x7D, 	// 20 //
				0x4D, 0x5D, 0x5C, 0x4E, 0x6B, 0x60, 0x4B, 0x61, 	// 28 //
				0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 	// 30 //
				0xF8, 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F, 	// 38 //
				0x7C, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 	// 40 //
				0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 	// 48 //
				0xD7, 0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 	// 50 //
				0xE7, 0xE8, 0xE9, 0x4A, 0xE0, 0x5A, 0x5F, 0x6D, 	// 58 //
				0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 	// 60 //
				0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 	// 68 //
				0x97, 0x98, 0x99, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 	// 70 //
				0xA7, 0xA8, 0xA9, 0xC0, 0xBB, 0xD0, 0xA1, 0x07, 	// 78 //
				0x9F, 0x21, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 	// 80 //
				0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x09, 0x2E, 0x1B, 	// 88 //
				0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 	// 90 //
				0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x14, 0x2E, 0xE8, 	// 98 //
				0x41, 0xAA, 0xB0, 0xB1, 0x2E, 0xB2, 0x6A, 0xB5, 	// A0 //
				0xBD, 0xB4, 0x9A, 0x8A, 0xBA, 0xCA, 0xAF, 0xBC, 	// A8 //
				0x90, 0x8F, 0xEA, 0xFA, 0xBE, 0xA0, 0xB6, 0xB3, 	// B0 //
				0x9D, 0xDA, 0x9B, 0x8B, 0xB7, 0xB8, 0xB9, 0xAB, 	// B8 //
				0x64, 0x65, 0x62, 0x66, 0x63, 0x67, 0x9E, 0x68, 	// C0 //
				0x74, 0x71, 0x72, 0x73, 0x78, 0x75, 0x76, 0x77, 	// C8 //
				0xAC, 0x69, 0xED, 0xEE, 0xEB, 0xEF, 0xEC, 0xBF, 	// D0 //
				0x80, 0xFD, 0xFE, 0xFB, 0xFC, 0xAD, 0xAE, 0x59, 	// D8 //
				0x44, 0x45, 0x42, 0x46, 0x43, 0x47, 0x9C, 0x48, 	// E0 //
				0x54, 0x51, 0x52, 0x53, 0x58, 0x55, 0x56, 0x57, 	// E8 //
				0x8C, 0x49, 0xCD, 0xCE, 0xCB, 0xCF, 0xCC, 0xE1, 	// F0 //
				0x70, 0xDD, 0xDE, 0xDB, 0xDC, 0x8D, 0x8E, 0xDF};	// F8 //

static  const unsigned char eatab[] = {  //**** EBCDIC -----> ASCII ****//
				0x00, 0x01, 0x02, 0x03, 0x2E, 0x09, 0x2E, 0x7F, 	// 00 //
				0x2E, 0x8D, 0x2E, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 	// 08 //
				0x10, 0x11, 0x12, 0x13, 0x9D, 0x2E, 0x08, 0x2E, 	// 10 //
				0x18, 0x19, 0x2E, 0x8F, 0x1C, 0x1D, 0x1E, 0x1F, 	// 18 //
				0x2E, 0x81, 0x2E, 0x2E, 0x2E, 0x0A, 0x17, 0x1B, 	// 20 //
				0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x05, 0x06, 0x07, 	// 28 //
				0x90, 0x2E, 0x16, 0x2E, 0x2E, 0x2E, 0x2E, 0x04, 	// 30 //
				0x2E, 0x2E, 0x2E, 0x2E, 0x14, 0x15, 0x2E, 0x1A, 	// 38 //
				0x20, 0xA0, 0xE2, 0xE4, 0xE0, 0xE1, 0xE3, 0xE5, 	// 40 //
				0xE7, 0xF1, 0x5B, 0x2E, 0x3C, 0x28, 0x2B, 0x21, 	// 48 //
				0x26, 0xE9, 0xEA, 0xEB, 0xE8, 0xED, 0xEE, 0xEF, 	// 50 //
				0xEC, 0xDF, 0x5D, 0x24, 0x2A, 0x29, 0x3B, 0x5E, 	// 58 //
				0x2D, 0x2F, 0xC2, 0xC4, 0xC0, 0xC1, 0xC3, 0xC5, 	// 60 //
				0xC7, 0xD1, 0xA6, 0x2C, 0x25, 0x5F, 0x3E, 0x3F, 	// 68 //
				0xF8, 0xC9, 0xCA, 0xCB, 0xC8, 0xCD, 0xCE, 0xCF, 	// 70 //
				0xCC, 0x60, 0x3A, 0x23, 0x40, 0x27, 0x3D, 0x22, 	// 78 //
				0xD8, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 	// 80 //
				0x68, 0x69, 0xAB, 0xBB, 0xF0, 0xFD, 0xFE, 0xB1, 	// 88 //
				0xB0, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 	// 90 //
				0x71, 0x72, 0xAA, 0xBA, 0xE6, 0xB8, 0xC6, 0x80, 	// 98 //
				0xB5, 0x7E, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 	// A0 //
				0x79, 0x7A, 0xA1, 0xBF, 0xD0, 0xDD, 0xDE, 0xAE, 	// A8 //
				0xA2, 0xA3, 0xA5, 0xB7, 0xA9, 0xA7, 0xB6, 0xBC, 	// B0 //
				0xBD, 0xBE, 0xAC, 0x7C, 0xAF, 0xA8, 0xB4, 0xD7, 	// B8 //
				0x7B, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 	// C0 //
				0x48, 0x49, 0xAD, 0xF4, 0xF6, 0xF2, 0xF3, 0xF5, 	// C8 //
				0x7D, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 	// D0 //
				0x51, 0x52, 0xB9, 0xFB, 0xFC, 0xF9, 0xFA, 0xFF, 	// D8 //
				0x5C, 0xF7, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 	// E0 //
				0x59, 0x5A, 0xB2, 0xD4, 0xD6, 0xD2, 0xD3, 0xD5, 	// E8 //
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 	// F0 //
				0x38, 0x39, 0xB3, 0xDB, 0xDC, 0xD9, 0xDA, 0x2E};	// F8 //

MY_TIME_T GetTime();
double DiffTime(MY_TIME_T start, MY_TIME_T end);
void formatTimeDiffSecs(char * result, double time);
char getHexCharValue(unsigned char charIn);
void AsciiToHex(const unsigned char *dati, unsigned int pl, unsigned char *dato);
void HexToAscii(unsigned char *dati, unsigned int pl, unsigned char *dato);
char fromHex(char firstchar, char secondchar);
int checkIfHex(LPCTSTR dataptr, int datalen);
int charValue(char input);
int64_t my_atoi64(const char * valueptr);
void AsciiToEbcdic(unsigned char *dati, unsigned int pl, unsigned char *dato);
void EbcdicToAscii(const unsigned char *dati, unsigned int pl, unsigned char *dato);
void convertEbcdic(char *data, int len);
int EbcdicCharToAsciiChar(int asciiCcsid, int ebcdicCcsid, const char * input, char * output);
const char * skipWhiteSpace(const char *start, const char *end);
char * skipBlanks(const char *str);
char * findBlank(char *ptr);
void Rtrim(char *str);
const char * skipQuotedString(const char *start, const char *eod);
short reverseBytes(short *var);
int reverseBytes4(int var);
void reverseBytes24(unsigned char *in, unsigned char *out);
void reverseBytes32(unsigned char *in, unsigned char *out);
void * rfhMalloc(size_t length, const char * tag);
void rfhFree(void * ptr);
void rfhTraceStats();
int findcrlf(const unsigned char *datain, const int maxchar);
int findcrlfW(const wchar_t *datain, const int maxchar);
int roundLength(unsigned char *ptr);
int roundLength2(unsigned char * ptr, const int encoding);
void formatDateTime(char *result, char *date, char *time);
void setCharData(char *data, int size, LPCTSTR dataIn, int len);
//void openDumpFile();
void closeDumpFile();
void dumpStr(const char * str);
void dumpData(char * data, int len);
void buildInvalidCharTable(char * invalidCharTable);
int matchEbcdicToAscii(const int ccsid);
void translateEbcdicData(unsigned char *out, const unsigned char *in, unsigned int len, int ebcdicCP);
char * parseRFH1String(char *ptr, char *value, int maxSize);
BOOL isCodePageInstalled(const int ccsid);
void processBackspace(CWnd *wnd);
BOOL isUCS2(int ccsid);
int UCS2ToMultiByte(unsigned char * ucsptr, int ucslen, unsigned char * mbsptr, int mbslen);
int MultiByteToUCS2(unsigned char * ucsptr, int ucslen, unsigned char * mbsptr, int mbslen);
int char1208toWCS(wchar_t * ucsptr, const unsigned char * mbsptr);
int mbsCharCount(const unsigned char * mbsptr);
int WCSto1250(const wchar_t * ucsptr, unsigned char * mbsptr);
int WCSto1251(const wchar_t * ucsptr, unsigned char * mbsptr);
int WCSto1252(const wchar_t * ucsptr, unsigned char * mbsptr);
int WCSto1253(const wchar_t * ucsptr, unsigned char * mbsptr);
int WCSto1254(const wchar_t * ucsptr, unsigned char * mbsptr);
int WCSto1255(const wchar_t * ucsptr, unsigned char * mbsptr);
int WCSto1256(const wchar_t * ucsptr, unsigned char * mbsptr);
int WCSto1257(const wchar_t * ucsptr, unsigned char * mbsptr);
int WCSto1258(const wchar_t * ucsptr, unsigned char * mbsptr);

//#ifdef  __cplusplus
//}
//#endif
